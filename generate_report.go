package main

import (
	"encoding/json"
	"fmt"
	"os"
	"github.com/xuri/excelize/v2"
)

type Vulnerability struct {
	ID string `json:"id"`
}

type Match struct {
	Vulnerability Vulnerability `json:"vulnerability"`
}

type ScanResults struct {
	Matches []Match `json:"matches"`
}

func main() {
	// Abrir el archivo JSON con los resultados del escaneo
	file, err := os.Open("results.json")
	if err != nil {
		fmt.Println("Error al abrir el archivo:", err)
		return
	}
	defer file.Close()

	// Decodificar el JSON
	var results ScanResults
	decoder := json.NewDecoder(file)
	if err := decoder.Decode(&results); err != nil {
		fmt.Println("Error al decodificar el JSON:", err)
		return
	}

	// Crear un nuevo archivo Excel
	f := excelize.NewFile()
	sheet := "Sheet1"
	f.NewSheet(sheet)

	// Escribir los encabezados
	f.SetCellValue(sheet, "A1", "Repository")
	f.SetCellValue(sheet, "B1", "Vulnerability")

	// Obtener la URL del repositorio desde las variables de entorno
	repoURL := os.Getenv("REPO_URL")

	// Escribir las vulnerabilidades en el archivo Excel
	row := 2
	for _, match := range results.Matches {
		f.SetCellValue(sheet, fmt.Sprintf("A%d", row), repoURL)
		f.SetCellValue(sheet, fmt.Sprintf("B%d", row), match.Vulnerability.ID)
		row++
	}

	// Guardar el archivo Excel
	if err := f.SaveAs("vulnerabilities_report.xlsx"); err != nil {
		fmt.Println("Error al guardar el archivo Excel:", err)
	}
}
