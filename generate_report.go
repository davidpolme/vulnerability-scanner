package main

import (
    "encoding/json"
    "fmt"
    "io/ioutil"
    "os"
    "strings"

    "github.com/360EntSecGroup-Skylar/excelize/v2"
)

type Vulnerability struct {
    ID          string `json:"id"`
    Description string `json:"description"`
}

type Report struct {
    Matches []struct {
        Vulnerability Vulnerability `json:"vulnerability"`
    } `json:"matches"`
}

func main() {
    repoUrls := strings.Split(os.Getenv("REPO_URLS"), " ")
    f := excelize.NewFile()
    sheet := f.NewSheet("Report")
    f.SetActiveSheet(sheet)
    f.SetCellValue("Report", "A1", "Repository")
    f.SetCellValue("Report", "B1", "Vulnerability")

    row := 2
    for _, repo := range repoUrls {
        data, err := ioutil.ReadFile(fmt.Sprintf("results/%s.json", strings.TrimSuffix(repo, ".git")))
        if err != nil {
            fmt.Println(err)
            continue
        }

        var report Report
        if err := json.Unmarshal(data, &report); err != nil {
            fmt.Println(err)
            continue
        }

        for _, match := range report.Matches {
            f.SetCellValue("Report", fmt.Sprintf("A%d", row), repo)
            f.SetCellValue("Report", fmt.Sprintf("B%d", row), match.Vulnerability.Description)
            row++
        }
    }

    if err := f.SaveAs("report.xlsx"); err != nil {
        fmt.Println(err)
    }
}
